# Setup Login
### get admin token
POST localhost:8080/token
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
client.global.set("auth_token_admin", "" + response.body);
client.global.set("username", "UseCase4_1_1");
client.global.set("barkeeper", "UseCase4_1_2");
client.global.set("treasurer", "UseCase4_1_3");
%}

### UseCase - Teilnehmer hinzufügen
POST localhost:8080/admin/user/{{username}}
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "admin",
  "authorities": ["USER"]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - Teilnehmer abfragen
GET localhost:8080/admin/user/{{username}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - Teilnehmer updaten
PUT localhost:8080/admin/user/{{username}}
Content-Type: application/json

{
  "username": "{{username}}",
  "authorities": ["ADMIN"]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}


### UseCase - Teilnehmer löschen
DELETE localhost:8080/admin/user/{{username}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - Teilnehmer abfragen 2 (nach dem löschen)
GET localhost:8080/admin/user/{{username}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - 4.1.2 Barkeeper verwalten 1
POST localhost:8080/admin/user/{{barkeeper}}
Content-Type: application/json

{
  "username": "{{barkeeper}}",
  "password": "admin",
  "authorities": ["USER"]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - 4.1.2 Barkeeper verwalten 2
PUT localhost:8080/admin/user/{{barkeeper}}
Content-Type: application/json

{
  "authorities": ["USER","BARKEEPER"]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - 4.1.3 Kassenwart verwalten 1
POST localhost:8080/admin/user/{{treasurer}}
Content-Type: application/json

{
  "username": "{{treasurer}}",
  "password": "admin",
  "authorities": ["USER"]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### UseCase - 4.1.3 Kassenwart verwalten 2
PUT localhost:8080/admin/user/{{treasurer}}
Content-Type: application/json

{
  "authorities": ["USER","TREASURER"]
}
> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### #UseCase - 4.2 Produkte Verwalten
### Produkt hinzufügen
POST localhost:8080/admin/product/
Content-Type: application/json

{
  "name": "UseCase-4.2",
  "price": 100
}
> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
client.global.set("productID", "" + response.body.id);
%}


### Produkt bearbeiten
PUT localhost:8080/admin/product/{{productID}}
Content-Type: application/json

{
  "id": {{productID}},
  "name": "UseCase-4.2",
  "price": 150
}
> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Produkt deaktivieren
DELETE localhost:8080/admin/product/{{productID}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Produkt abfragen
GET localhost:8080/admin/product/{{productID}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}
